{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","task","handleChange","bind","assertThisInitialized","handleSubmit","evt","setState","defineProperty","target","name","value","preventDefault","createTodo","objectSpread","id","uuid","completed","react_default","a","createElement","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","result","CSSTransition","key","timeout","classNames","onClick","TransitionGroup","class","TodoList","todos","create","remove","update","toggleCompletion","newTodo","concat","toConsumableArray","filter","t","updatedTask","updatedTodos","map","todo","_this2","src_Todo_0","src_NewTodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0be9d390.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport uuid from \"uuid/v4\";\nimport \"./NewTodoForm.css\";\n\nclass NewTodoForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { task: \"\" };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\n    this.setState({ task: \"\" });\n  }\n  render() {\n    return (\n      <form className='NewTodoForm' onSubmit={this.handleSubmit}>\n        <label htmlFor='task'></label>\n        <input\n          type='text'\n          placeholder='New Todo'\n          id='task'\n          name='task'\n          value={this.state.task}\n          onChange={this.handleChange}\n        />\n        <button>Add</button>\n      </form>\n    );\n  }\n}\nexport default NewTodoForm;\n","import React, { Component } from \"react\";\nimport \"./Todo.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isEditing: false,\n      task: this.props.task\n    };\n    this.handleRemove = this.handleRemove.bind(this);\n    this.toggleForm = this.toggleForm.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n    this.handleToggle = this.handleToggle.bind(this);\n  }\n  handleRemove() {\n    this.props.removeTodo(this.props.id);\n  }\n  toggleForm() {\n    this.setState({ isEditing: !this.state.isEditing });\n  }\n  handleUpdate(evt) {\n    evt.preventDefault();\n    //take new task data and pass up to parent\n    this.props.updateTodo(this.props.id, this.state.task);\n    this.setState({ isEditing: false });\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n  handleToggle(evt) {\n    this.props.toggleTodo(this.props.id);\n  }\n  render() {\n    let result;\n    if (this.state.isEditing) {\n      result = (\n        <CSSTransition key='editing' timeout={500} classNames='form'>\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n            <input\n              type='text'\n              value={this.state.task}\n              name='task'\n              onChange={this.handleChange}\n            />\n            <button>Save</button>\n          </form>\n        </CSSTransition>\n      );\n    } else {\n      result = (\n        <CSSTransition key='normal' timeout={500} classNames='task-text'>\n          <li className='Todo-task' onClick={this.handleToggle}>\n            {this.props.task}\n          </li>\n        </CSSTransition>\n      );\n    }\n    return (\n      <TransitionGroup\n        className={this.props.completed ? \"Todo completed\" : \"Todo\"}\n      >\n        {result}\n        <div className='Todo-buttons'>\n          <button onClick={this.toggleForm}>\n            <i class='fas fa-pen' />\n          </button>\n          <button onClick={this.handleRemove}>\n            <i class='fas fa-trash' />\n          </button>\n        </div>\n      </TransitionGroup>\n    );\n  }\n}\nexport default Todo;\n","import React, { Component } from \"react\";\nimport NewTodoForm from \"./NewTodoForm\";\nimport Todo from \"./Todo\";\nimport \"./TodoList.css\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.create = this.create.bind(this);\n    this.remove = this.remove.bind(this);\n    this.update = this.update.bind(this);\n    this.toggleCompletion = this.toggleCompletion.bind(this);\n  }\n  create(newTodo) {\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n  remove(id) {\n    this.setState({\n      todos: this.state.todos.filter(t => t.id !== id)\n    });\n  }\n  update(id, updatedTask) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, task: updatedTask };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  toggleCompletion(id) {\n    const updatedTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n      return todo;\n    });\n    this.setState({ todos: updatedTodos });\n  }\n  render() {\n    const todos = this.state.todos.map(todo => {\n      return (\n        <CSSTransition key={todo.id} timeout={500} classNames='todo'>\n          <Todo\n            key={todo.id}\n            id={todo.id}\n            task={todo.task}\n            completed={todo.completed}\n            removeTodo={this.remove}\n            updateTodo={this.update}\n            toggleTodo={this.toggleCompletion}\n          />\n        </CSSTransition>\n      );\n    });\n    return (\n      <div className='TodoList'>\n        <h1>\n          To Do<span>An Animated Todo List Made With React</span>\n        </h1>\n        <NewTodoForm createTodo={this.create} />\n\n        <ul>\n          <TransitionGroup className='todo-list'>{todos}</TransitionGroup>\n        </ul>\n      </div>\n    );\n  }\n}\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}